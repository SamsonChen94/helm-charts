{{- /*
  This resource is only for config maps. Data stored in config maps will be
  injected into the workload post-deployment. Config maps can store either
  strings or files. This implementation assumes all environment variables from
  the workload are defined inside config maps. This means strings are injected
  as environment variables via 'env' definition and files are injected as file
  mounted objects via the 'mountVolume' and 'volume' definitions.
  Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap
*/}}
{{- $configArgs := dict "config" .Values.configurations "configOutput" (dict) }}
{{- include "configEnabledCheck" $configArgs }}
{{- if or $configArgs.configOutput.configFile $configArgs.configOutput.configString }}
{{- $configDataFiles := $configArgs.config.files }}
{{- $configDataStrings := $configArgs.config.strings }}
{{- /*
  Checking for additional configuration from additional containers.
  Loops each additional container and find the additional configurations, if any
  Appends all additional configurations into exiting $configArgs.config dictionary
*/}}
{{- if .Values.additionalContainers }}
{{- range $extraContainer := .Values.additionalContainers }}
{{- if $extraContainer.configurations }}
{{- if $extraContainer.configurations.files }}
{{- $configDataFiles = concat $configArgs.config.files $extraContainer.configurations.files }}
{{- end }}
{{- if $extraContainer.configurations.strings }}
{{- $configDataStrings = mustMerge $configArgs.config.strings $extraContainer.configurations.strings }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
apiVersion: v1
data:
  {{- /*
    Config maps as entire files
    1. Retrieves glob data from ../config directory
    2. Iterate over everything in "configurations.files"
    3. Iterate over all files in ../config directory
    4. Skip files that are not declared in "configurations.files"
    5. Error out if element in "configurations.files" does not exist in ../config
  */}}
  {{- if $configArgs.configOutput.configFile }}
  {{- $directory := .Files.Glob "config/**" }}
  {{- range $file := $configDataFiles }}
  {{- $fileExists := false }}
  {{- range $path, $_ := $directory }}
  {{- $filename := split "/" $path }}
  {{- if eq $filename._1 $file }}
  {{- $fileExists = true }}
  {{ $filename._1 }}: |
    {{- $.Files.Get $path | trim | nindent 4 }}
  {{- end }}
  {{- end }}
  {{- if not $fileExists }}
  {{- fail ( printf "\n\nError --> %s does not exist in configs directory\n" $file ) }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- /*
    Config maps as variables
  */}}
  {{- if $configArgs.configOutput.configString }}
  {{- range $key, $value := $configDataStrings }}
  {{ $key }}: {{ $value }}
  {{- end }}
  {{- end }}
kind: ConfigMap
metadata:
  labels:
    {{- include "labels" . | nindent 4 }}
  name: {{ template "fullname" . }}-cm
  namespace: {{ .Release.Namespace }}
{{- end }}
