{{- $autoscaling := false }}
{{- if .Values.autoscaling }}
{{- if .Values.autoscaling.enabled }}
{{- $autoscaling = true }}
{{- end }}
{{- end }}
{{- $configuration := false }}
{{- if .Values.config }}
{{- if .Values.config.enabled }}
{{- $configuration = true }}
{{- end }}
{{- end }}
{{- $secret := false }}
{{- if .Values.secrets }}
{{- if .Values.secrets.enabled }}
{{- $secret = true }}
{{- end }}
{{- end }}
{{- $disk := false }}
{{- if .Values.storage }}
{{- if .Values.storage.enabled }}
{{- $disk = true }}
{{- end }}
{{- end }}
{{- $prometheus := false }}
{{- if .Values.prometheus }}
{{- if and .Values.prometheus.enabled ( eq .Values.prometheus.scrapeLocation "pod" ) }}
{{- $prometheus = true }}
{{- end }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    {{- if .Values.labelOverride }}
{{ toYaml .Values.labelOverride | indent 4 }}
    {{- end }}
  name: {{ template "fullname" . }}-deploy
  namespace: {{ .Release.Namespace }}
spec:
  minReadySeconds: 10
  progressDeadlineSeconds: 600
  {{- if $autoscaling }}
  replicas: {{ required "min in autoscaling required" .Values.autoscaling.min }}
  {{- else }}
  replicas: {{ .Values.replicas | default 1 }}
  {{- end }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      chart: {{ .Chart.Name }}-{{ .Chart.Version }}
      {{- if .Values.labelOverride }}
{{ toYaml .Values.labelOverride | indent 6 }}
      {{- end }}
  strategy:
    {{- if .Values.scheduling }}
    {{- if eq .Values.scheduling.updateType "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.scheduling.maxSurge | default "25%" }}
      maxUnavailable: {{ .Values.scheduling.maxUnavailable | default "25%" }}
    type: RollingUpdate
    {{- else if eq .Values.scheduling.updateType "Recreate" }}
    {{- if or ( .Values.scheduling.maxSurge ) ( .Values.scheduling.maxUnavailable ) }}
    {{- fail "\n\nError --> maxSurge and maxUnavailable only for RollingUpdate updateType.\n" }}
    {{- end }}
    type: Recreate
    {{- end }}
    {{- else }}
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
    {{- end }}
  template:
    {{- if or ( or $configuration $secret ) $prometheus }}
    annotations:
      {{- if $configuration }}
      checksum/config: {{ include ( print .Template.BasePath "/configMap.yaml" ) . | sha256sum }}
      {{- end }}
      {{- if $secret }}
      checksum/config: {{ include ( print .Template.BasePath "/secret.yaml" ) . | sha256sum }}
      {{- end }}
      {{- if $prometheus }}
      prometheus.io/scrape: "true"
      prometheus.io/port: {{ .Values.prometheus.scrapePort | default "8080" | quote }}
      prometheus.io/path: {{ .Values.prometheus.scrapePath | default "/metrics" | quote }}
      {{- end }}
    {{- end }}
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        {{- if .Values.labelOverride }}
{{ toYaml .Values.labelOverride | indent 8 }}
        {{- end }}
    spec:
      {{- if .Values.scheduling.affinity }}
      {{- if .Values.scheduling.affinity.enabled }}
      affinity:
        {{- if or .Values.scheduling.affinity.tryDeployToNode .Values.scheduling.affinity.mustDeployToNode }}
        nodeAffinity:
          {{- if .Values.scheduling.affinity.tryDeployToNode }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  {{- range $value := .Values.scheduling.affinity.tryDeployToNode }}
                  {{- if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                  - key: {{ regexSplit "=" $value -1 | first }}
                    operator: In
                    values: {{ regexSplit "," ( regexSplit "=" $value -1 | last ) -1 }}
                  {{- else if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}!=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                  - key: {{ regexSplit "!=" $value -1 | first }}
                    operator: NotIn
                    values: {{ regexSplit "," ( regexSplit "!=" $value -1 | last ) -1 }}
                  {{- else }}
                  {{- fail ( printf "\n\nError --> %s is not a valid label key-value pair\n" $value ) }}
                  {{- end }}
                  {{- end }}
              weight: 100
          {{- end }}
          {{- if .Values.scheduling.affinity.mustDeployToNode }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  {{- range $value := .Values.scheduling.affinity.mustDeployToNode }}
                  {{- if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                  - key: {{ regexSplit "=" $value -1 | first }}
                    operator: In
                    values: {{ regexSplit "," ( regexSplit "=" $value -1 | last ) -1 }}
                  {{- else if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}!=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                  - key: {{ regexSplit "!=" $value -1 | first }}
                    operator: NotIn
                    values: {{ regexSplit "," ( regexSplit "!=" $value -1 | last ) -1 }}
                  {{- else }}
                  {{- fail ( printf "\n\nError --> %s is not a valid label key-value pair\n" $value ) }}
                  {{- end }}
                  {{- end }}
          {{- end }}
        {{- end }}
        {{- if or .Values.scheduling.affinity.tryDeployWithPod .Values.scheduling.affinity.mustDeployWithPod }}
        podAffinity:
          {{- if .Values.scheduling.affinity.tryDeployWithPod }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  - matchExpressions:
                      {{- range $value := .Values.scheduling.affinity.tryDeployWithPod }}
                      {{- if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                      - key: {{ regexSplit "=" $value -1 | first }}
                        operator: In
                        values: {{ regexSplit "," ( regexSplit "=" $value -1 | last ) -1 }}
                      {{- else if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}!=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                      - key: {{ regexSplit "!=" $value -1 | first }}
                        operator: NotIn
                        values: {{ regexSplit "," ( regexSplit "!=" $value -1 | last ) -1 }}
                      {{- else }}
                      {{- fail ( printf "\n\nError --> %s is not a valid label key-value pair\n" $value ) }}
                      {{- end }}
                      {{- end }}
                topologyKey: topology.kubernetes.io/zone
              weight: 100
          {{- end }}
          {{- if .Values.scheduling.affinity.mustDeployWithPod }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                - matchExpressions:
                    {{- range $value := .Values.scheduling.affinity.mustDeployWithPod }}
                    {{- if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                    - key: {{ regexSplit "=" $value -1 | first }}
                      operator: In
                      values: {{ regexSplit "," ( regexSplit "=" $value -1 | last ) -1 }}
                    {{- else if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}!=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                    - key: {{ regexSplit "!=" $value -1 | first }}
                      operator: NotIn
                      values: {{ regexSplit "," ( regexSplit "!=" $value -1 | last ) -1 }}
                    {{- else }}
                    {{- fail ( printf "\n\nError --> %s is not a valid label key-value pair\n" $value ) }}
                    {{- end }}
                    {{- end }}
              topologyKey: topology.kubernetes.io/zone
          {{- end }}
        {{- end }}
        {{- if or .Values.scheduling.affinity.tryNotDeployWithPod .Values.scheduling.affinity.mustNotDeployWithPod }}
        podAntiAffinity:
          {{- if .Values.scheduling.affinity.tryNotDeployWithPod }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  - matchExpressions:
                      {{- range $value := .Values.scheduling.affinity.tryNotDeployWithPod }}
                      {{- if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                      - key: {{ regexSplit "=" $value -1 | first }}
                        operator: In
                        values: {{ regexSplit "," ( regexSplit "=" $value -1 | last ) -1 }}
                      {{- else if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}!=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                      - key: {{ regexSplit "!=" $value -1 | first }}
                        operator: NotIn
                        values: {{ regexSplit "," ( regexSplit "!=" $value -1 | last ) -1 }}
                      {{- else }}
                      {{- fail ( printf "\n\nError --> %s is not a valid label key-value pair\n" $value ) }}
                      {{- end }}
                      {{- end }}
                topologyKey: topology.kubernetes.io/zone
              weight: 100
          {{- end }}
          {{- if .Values.scheduling.affinity.mustNotDeployWithPod }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                - matchExpressions:
                    {{- range $value := .Values.scheduling.affinity.mustNotDeployWithPod }}
                    {{- if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                    - key: {{ regexSplit "=" $value -1 | first }}
                      operator: In
                      values: {{ regexSplit "," ( regexSplit "=" $value -1 | last ) -1 }}
                    {{- else if regexMatch "^[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}!=[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}[,[a-z0-9A-Z][a-z0-9A-Z/.-]{1,62}]*$" $value }}
                    - key: {{ regexSplit "!=" $value -1 | first }}
                      operator: NotIn
                      values: {{ regexSplit "," ( regexSplit "!=" $value -1 | last ) -1 }}
                    {{- else }}
                    {{- fail ( printf "\n\nError --> %s is not a valid label key-value pair\n" $value ) }}
                    {{- end }}
                    {{- end }}
              topologyKey: topology.kubernetes.io/zone
          {{- end }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if not .Values.containers }}
      {{- fail "\n\nError --> containers is a required field for all helm deployments\n" }}
      {{- end }}
      containers:
        {{- $checkContainerName := list }}
        {{- range $container := .Values.containers }}
        {{- $probes := false }}
        {{- if $container.probes }}
        {{- $probes = true }}
        {{- end }}
        - {{ if $container.arguments -}}
          args:
            {{- range $argumentList := $container.arguments }}
            - {{ $argumentList | quote }}
            {{- end }}
          {{ end -}}
          {{ if $container.command -}}
          command:
            {{- range $commandList := $container.command }}
            - {{ $commandList | quote }}
            {{- end }}
          {{ end -}}
          {{ if $container.variables -}}
          env:
            {{- range $key, $value := $container.variables.environment }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
            {{- range $value := $container.variables.secret }}
            {{- if not $secret }}
            {{- fail "\n\nError --> Secrets in container detected but secrets GKE resource not enabled.\n" }}
            {{- end }}
            {{- if has $value $.Values.secrets.variableNames }}
            - name: {{ $value }}
              valueFrom:
                secretKeyRef:
                  key: {{ $value }}
                  name: {{ template "fullname" $ }}-secret
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not defined in secrets.variableNames\n" $value )}}
            {{- end }}
            {{- end }}
          {{ end -}}
          {{ if $container.image -}}
          image: {{ $container.image.name }}:{{ $container.image.tag }}
          imagePullPolicy: {{ $container.image.pullPolicy }}
          {{- else }}
          {{- fail "\n\nError --> container image not defined\n" }}
          {{- end }}
          {{- if $probes }}
          {{- if $container.probes.liveness }}
          livenessProbe:
            {{ $container.probes.liveness.type }}:
              {{- if $container.probes.liveness.headers }}
              httpHeaders:
                {{- range $key, $value := $container.probes.liveness.headers }}
                - name: $key
                  value: $value
                {{- end }}
              {{- end }}
              path: {{ $container.probes.liveness.path | default "/" }}
              port: {{ required "\n\nError --> missing port in probes.liveness\n" $container.probes.liveness.port }}
              scheme: {{ $container.probes.liveness.scheme | default "HTTP" }}
            failureThreshold: {{ $container.probes.failureThreshold | default "3" }}
            initialDelaySeconds: {{ $container.probes.initialDelaySeconds | default "0" }}
            periodSeconds: {{ $container.probes.periodSeconds | default "10" }}
            successThreshold: {{ $container.probes.successThreshold | default "1" }}
            timeoutSeconds: {{ $container.probes.timeoutSeconds | default "1" }}
          {{- end }}
          {{- end }}
          {{- if has $container.name $checkContainerName }}
          {{- fail "\n\nError --> duplicate container name found\n"}}
          {{- end }}
          {{- $checkContainerName := append $checkContainerName $container.name }}
          name: {{ required "\n\nError --> missing container name\n" $container.name }}
          {{- if $container.ports }}
          ports:
          {{- range $port := $container.ports.tcp }}
            - containerPort: {{ $port }}
              protocol: TCP
          {{- end }}
          {{- range $port := $container.ports.udp }}
            - containerPort: {{ $port }}
              protocol: UDP
          {{- end }}
          {{- else }}
          {{- fail "\n\nError --> container.ports is a required field.\n" }}
          {{- end }}
          {{- if $probes }}
          {{- if $container.probes.readiness }}
          readinessProbe:
            {{ $container.probes.readiness.type }}:
              {{- if $container.probes.readiness.headers }}
              httpHeaders:
                {{- range $key, $value := $container.probes.readiness.headers }}
                - name: $key
                  value: $value
                {{- end }}
              {{- end }}
              path: {{ $container.probes.readiness.path | default "/" }}
              port: {{ required "\n\nError --> missing port in probes.readiness\n" $container.probes.readiness.port }}
              scheme: {{ $container.probes.readiness.scheme | default "HTTP" }}
            failureThreshold: {{ $container.probes.failureThreshold | default "3" }}
            initialDelaySeconds: {{ $container.probes.initialDelaySeconds | default "0" }}
            periodSeconds: {{ $container.probes.periodSeconds | default "10" }}
            successThreshold: {{ $container.probes.successThreshold | default "1" }}
            timeoutSeconds: {{ $container.probes.timeoutSeconds | default "1" }}
          {{- end }}
          {{- end }}
          {{- if $container.resources }}
          resources:
{{ toYaml $container.resources | indent 12 }}
          {{- end }}
          {{- if $container.volumeMounts }}
          volumeMounts:
            {{- range $mount := $container.volumeMounts }}
            {{- if and ( and $disk $configuration ) $secret }}
            {{- if hasKey $.Values.storage $mount }}
            - mountPath: /mount/volume
              name: {{ $mount }}
            {{- else if has $mount $.Values.config.files }}
            - mountPath: /mount/config/{{ $mount }}
              name: configMap
              subPath: {{ $mount }}
            {{- else if has $mount $.Values.secrets.fileNames }}
            - mountPath: /mount/secret/{{ $mount }}
              name: secret
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in storage or config.files or secrets.fileNames\n" $mount ) }}
            {{- end }}
            {{- else if and $disk $configuration }}
            {{- if hasKey $.Values.storage $mount }}
            - mountPath: /mount/volume
              name: {{ $mount }}
            {{- else if has $mount $.Values.config.files }}
            - mountPath: /mount/config/{{ $mount }}
              name: configMap
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in storage or config.files\n" $mount ) }}
            {{- end }}
            {{- else if and $disk $secret }}
            {{- if hasKey $.Values.storage $mount }}
            - mountPath: /mount/volume
              name: {{ $mount }}
            {{- else if has $mount $.Values.secrets.fileNames }}
            - mountPath: /mount/secret/{{ $mount }}
              name: secret
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in storage or secrets.fileNames\n" $mount ) }}
            {{- end }}
            {{- else if and $configuration $secret }}
            {{- if has $mount $.Values.config.files }}
            - mountPath: /mount/config/{{ $mount }}
              name: configMap
              subPath: {{ $mount }}
            {{- else if has $mount $.Values.secrets.fileNames }}
            - mountPath: /mount/secret/{{ $mount }}
              name: secret
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in config.files or secrets.fileNames\n" $mount ) }}
            {{- end }}
            {{- else if $disk }}
            {{- if hasKey $.Values.storage $mount }}
            - mountPath: /mount/volume
              name: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in storage\n" $mount ) }}
            {{- end }}
            {{- if has $mount $.Values.config.files }}
            - mountPath: /mount/config/{{ $mount }}
              name: configMap
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in storage or config.files or secrets.fileNames\n" $mount ) }}
            {{- end }}
            {{- else if $configuration }}
            {{- if has $mount $.Values.config.files }}
            - mountPath: /mount/config/{{ $mount }}
              name: configMap
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in config.files\n" $mount ) }}
            {{- end }}
            {{- else if $secret }}
            {{- if has $mount $.Values.secrets.fileNames }}
            - mountPath: /mount/secret/{{ $mount }}
              name: secret
              subPath: {{ $mount }}
            {{- else }}
            {{- fail ( printf "\n\nError --> %s not found in secrets.fileNames\n" $mount ) }}
            {{- end }}
            {{- else }}
            {{- fail "\n\nError --> volumeMounts in container declare but storage, configuration, and secrets are not enabled\n" }}
            {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      dnsPolicy: ClusterFirst
      {{- if .Values.scheduling }}
      {{- if .Values.scheduling.nodeSelector }}
      nodeSelector:
        {{ .Values.scheduling.nodeSelector.key }}: {{ .Values.scheduling.nodeSelector.value }}
      {{- end }}
      {{- end }}
      restartPolicy: Always
      {{- if .Values.scheduling }}
      {{- if .Values.scheduling.schedulerName }}
      schedulerName: {{ .Values.scheduling.schedulerName }}
      {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.scheduling }}
      {{- if .Values.scheduling.tolerations }}
      tolerations:
{{ toYaml .Values.scheduling.tolerations | indent 8 }}
      {{- end }}
      {{- end }}
      {{- if or ( or $configuration $secret ) $disk }}
      volumes:
        {{- if $secret }}
        - name: secret
          secret:
            defaultMode: 420
            secretName: {{ template "fullname" . }}-secret
        {{- end }}
        {{- if $configuration }}
        - configMap:
            defaultMode: 420
            name: {{ template "fullname" . }}-cm
          name: config
        {{- end }}
        {{- if $disk }}
        {{- $checkVolumeName := list }}
        {{- range $key, $_ := .Values.storage }}
        {{- if has $key $checkVolumeName }}
        {{- fail "\n\nError --> duplicate volume name found\n"}}
        {{- end }}
        {{- $checkVolumeName := append $checkVolumeName $key }}
        - name: {{ $key }}
          persistentVolumeClaim:
            claimName: {{ template "fullname" $ }}-{{ $key | lower }}-pvc
        {{- end }}
        {{- end }}
      {{- end }}
