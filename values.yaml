## WARNING: This file is just an example. Please do not use this file to deploy
##          anything. If any line was uncommented, unit test will fail!

## Main workload definition.
## Valid values: deployment, statefulset, daemonset, or cronjob
# workload: deployment

## Pod replica count. Does not apply to cronjobs. Defaults to 1
## NOTE: setting hpa.enabled to true will override this setting
# replicas: 1

## Image configuration
# imageName: nginx
# imagePullPolicy: IfNotPresent

## Container execution configuration. This setting overrides the original
## container's CMD configuration.
## command --> multi-string command (with spaces) that corresponds to Docker's
##             `EntryPoint` field
## argument --> multi-string command (with spaces) that corresponds to Docker's
##             `CMD` field
## i.e.: The following is equivalent to executing `/bin/bash test.sh foo bar`
## Ref: https://docs.docker.com/engine/reference/builder
# command: /bin/bash
# argument: test.sh foo bar

## Service network configuration.
## Valid services: none, headlessClusterIP, clusterIP, nodePort, loadBalancer,
##                 and internalLoadBalancer
## Required values in each service: name and containerPort
## containerPort must be a value between 1 and 65535 (inclusive)
## containerProtocol defaults to TCP with valid values as TCP, UDP, and SCTP
## servicePort defaults to containerPort
## NOTE: k8s services to workload is a many-to-many relation, meaning you can
##       assign multiple services to multiple workload containers
# services:
#   none:
#     portConfigs:
#       - name: name
#         containerPort: 8080
#   headlessClusterIP:
#     portConfigs:
#       - name: name-0
#         containerPort: 8080
#         containerProtocol: TCP
#         servicePort: 8080
#       - name: name-1
#         containerPort: 8080
#         containerProtocol: UDP
#         servicePort: 8080
#   clusterIP:
#     portConfigs:
#       - name: name-2
#         containerPort: 8081
#       - name: name-3
#         containerPort: 8082
#   nodePort:
#     portConfigs:
#       - name: name-4
#         containerPort: 8083
#       - name: name-5
#         containerPort: 8080
#       - name: name-6
#         containerPort: 8080
#         servicePort: 8081
#       - name: name-7
#         containerPort: 8082
#         servicePort: 8082
#   loadBalancer:
#     portConfigs:
#       - name: name-8
#         containerPort: 8084
#     staticIP: 118.163.7.135
#     whitelistedIPs:
#       - 10.0.0.0/8
#       - 118.163.7.135/32
#   internalLoadBalancer:
#     portConfigs:
#       - name: name-9
#         containerPort: 8085
#     staticIP: 10.10.225.255
#     whitelistedIPs:
#       - 10.0.0.0/8
#       - 118.163.7.135/32

## Ingress network configuration. Should only apply when at least one NodePort
## service type is configured. Please ensure each 'targetServicePort' is
## defined in services.nodePort.portConfigs.
## NOTE: k8s ingresses to services is a many-to-many relation, meaning you can
##       assign multiple ingresses to multiple services
# ingress:
#   enabled: true
#   ingressConfig:
#     - reservedIPName: "example-external-static-ip-name"
#       ssl: false
#       targets:
#         - domainName: "example.com"
#           serviceTargets:
#             - domainPath: "/*"
#               servicePort: 8080
#             - domainPath: "/foo/*"
#               servicePort: 8081
#         - domainName: "example-2.com"
#           serviceTargets:
#             - domainPath: "/*"
#               servicePort: 8080
#     - reservedIPName: "example-external-static-ip-name-2"
#       targets:
#         - domainName: "example-3.com"
#           serviceTargets:
#             - domainPath: "/*"
#               servicePort: 8082

## Resource allocation.
## Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
# resources:
#   limits:
#     cpu: 100m
#     memory: 100Mi
#   requests:
#     cpu: 100m
#     memory: 100Mi

## Scaling configuration. Should only apply when workload is deployment. In most
## cases, a 'RollingUpdate' is recommended. However, in the case of stateful
## workloads on deployments (i.e.: deployment workload with mounted persistent
## volumes), 'Recreate' would be recommended.
## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
# scalingConfig:
#   maxSurge: 1
#   maxUnavailable: 0
#   type: RollingUpdate

## Horizontal pod autoscaling configuration. Should only apply when workload is
## either deployment or stateful set. Currently only supports scaling by CPU
## utilization.
## TODO: add custom metrics support and memory utilization scaling
# hpa:
#   enabled: true
#   min: 1
#   max: 4
#   targetCPU: 80

## Cron job configurations. Should only apply when workload is a cron job.
# cronSettings:
#   enabled: false
#   schedule: 5 4 * * *
#   concurrency: Forbid
#   maxFailedHistory: 1
#   maxSucceedHistory: 1

## Inject configuration files or environment variables into deployment via
## configuration mapping
# configurations:
#   files:
#     - config.conf
#   strings:
#     - key1
#     - key2

## Inject secret files or environment variables into workload via k8s secrets
# secrets:
#   files:
#     - secret.conf
#   strings:
#     - key5

## Additional container configurations. Use this section if multiple containers
## are required to run in the same Kubernetes pod
# additionalContainers:
#   - name: secondary-container
#     imageName: nginx
#     imageTag: latest
#     imagePullPolicy: IfNotPresent
#     command: /bin/sh
#     argument: test-2.sh foo2 bar2
#     services:
#       clusterIP:
#         portConfigs:
#           - name: name-0
#             containerPort: 8080
#     configurations:
#       files:
#         - config3.sh
#       strings:
#         - key3
#         - key4
#     secrets:
#       files:
#         - secret3.sh
#       strings:
#         - key6
