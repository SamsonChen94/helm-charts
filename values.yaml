## Optional. Sets the number of replicas. Defaults to 1
## NOTE: will be overwritten by autoscaling.min if autoscaling.enable is true
replicas: 1

## TODO: Image pull secrets
## ref: https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod

## Required. Detailed configuration for container(s)
## Includes configuration for container name, image, environment variables,
##   ports, entrypoint command/arguments, resources, volume mounts, and probes
## NOTE: A single workload can house more than one container
containers:
  - ## Required. Container name that is unique in the scope of the workload
    name: example

    ## Required. Container image information
    ## Supported values for pullPolicy: Always, Never, IfNotPresent
    image:
      name: alpine
      tag: 3.13
      pullPolicy: Always

    ## Required. List the port numbers to open for this container
    ports:
      tcp: [80, 8080, 44380]
      udp: [8080]

    ## Required. Container CPU and memory resources allocation
    ## It is recommended to always set limits and requests for both resources
    ## NOTE: Max allocation for resources are limited by nodes, be wary of this
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 10Mi

    ## Optional. Container entrypoint arguments and command
    args: ["Hello World"]
    command: ["echo"]

    ## Optional. Variable configurations.
    ## Define workload environment variables directly here
    ## Define workload secret variables in secrets directory
    ## NOTE: secrets defined here only places variables in containers, to
    ##       define secret resources, please review "secrets" section below
    variables:
      environment:
        variableA: AAA
        variableB: BBB
        variableC: CCC
      secret:
        - secretA
        - secretB
        - secretC

    ## Optional. Probe configurations, all probes can match if needed
    ## Liveness probe continuously runs health checks on the specified
    ##   container and restarts when check fails
    ## Readiness probe continuously runs health checks on the specified
    ##   container and blocks incoming traffic when check fails
    probes:
      liveness:
        ## Supported types: httpGet, tcpSocket
        type: httpGet
        port: 80

        ## The following config ONLY applies to httpGet type
        headers:
          exampleHeaderName: exampleHeaderValue
        path: /path/to/health/check
        scheme: HTTP

        ## The following have default values, [3, 0, 10, 1, 1] respectively
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1

      readiness:
        ## Supported types: httpGet, tcpSocket
        type: tcpSocket
        port: 80

        ## The following config ONLY applies to httpGet type
        # headerName: exampleHeaderName
        # headerValue: exampleHeaderValue
        # path: /path/to/health/check
        # scheme: HTTP

        ## The following have default values, [3, 0, 10, 1, 1] respectively
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1

      ## TODO: add support for startup probe

    ## Optional. List of volumes/config names to mount into container
    ## NOTE: volume mounts and config maps defined here only places volume
    ##       mounts and config maps in containers, to define volume resources
    ##       or config maps, please review "storage" or "config" sections below
    ##       respectively
    volumeMounts:
      - exampleStorage
      - secondaryStorage
      - exampleConfigMap
      - secondaryConfigMap

  - name: example-sidecar
    image:
      name: alpine
      tag: 3.13
      pullPolicy: Always
    ports:
      tcp: [8081]
      udp: [8081]
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 10m
        memory: 10Mi
    args: ["Hello World"]
    command: ["echo"]

## TODO: initializing containers
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/

## Optional. Controls how and where pods will be deployed
## Leave this section commented out for default scheduling
## Use updateType to control how the pods are updated
## Use nodeSelector to control which nodes can the pods be deployed to
## Use tolerations to allow pods to be deployed to tainted nodes
## Use affinity to finely control pod distribution
## NOTE: Only one scheduling configuration per workload (deploy, sts, ds)
scheduling:
  ## Supported values for updateType: RollingUpdate (default) and Recreate
  ## maxSurge controls how many pods can surge during the update
  ## maxUnavailable controls how many pods are unavailable during the update
  ## NOTE: maxSurge and maxUnavailable are only available for RollingUpdate
  updateType: RollingUpdate
  maxSurge: 1
  maxUnavailable: 0

  ## Optional. Specify which Kubernetes scheduler to schedule this workload
  ## NOTE: default is default-scheduler
  schedulerName: default-scheduler

  ## Optional. Uses Kubernetes node pool labels to control pod deployment
  ## key is the node pool label key
  ## value is the node pool label value
  nodeSelector:
    key: workload-pool
    value: example

  ## Optional. Allows pods to run on tainted node pools
  ## Tainted node pools will only allow pods with tolerations to schedule
  ## NOTE: a single workload (deploy, sts, ds) can contain multiple tolerations
  tolerations:
    - effect: NoSchedule
      key: node-pool
      operator: Equal
      value: example

  ## Optional. Attracts or guarantees pods are scheduled
  ## Three existing types of affinities:
  ##   node affinity - pods are scheduled to specific nodes
  ##   pod affinity - pods are scheduled to nodes with specific pods
  ##   pod anti-affinity - pods are NOT schedule to nodes with specific pods
  affinity:
    enabled: false
    ## TODO: node affinity, pod affinity, and pod anti-affinity
    ## ref:
    ##   https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/node-affinity/#NodeAffinity
    ##   https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/pod-affinity/#PodAffinity
    ##   https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/pod-anti-affinity/#PodAntiAffinity

## Required. Creates Kubernetes service and ingress configuration
## serviceType: ClusterIP, NodePort, LoadBalancer, InternalLoadBalancer
## Use "headless: true" to set a headless service, pods directly accessible
## Includes configuration for Google's GKE managed certificates
## Also includes Google's GKE frontend and backend configurations
## NOTE: use "NodePort" when ingress is enabled
networking:
  serviceType: NodePort
  headless: false

  ## NOTE: supports multiple ingresses per service
  ## NOTE: supports only one service per deployment
  ## NOTE: supports multiple service ports per deployment
  config:
    - ## Required. ContainerPort:ServicePort/Protocol
      ## by default, service port will equal container port
      ## by default, protocol is assumed to be TCP
      portMapping: "8080:80/tcp"

      ## Optional. Creates the ingress and its networking components
      ingress: true

      # ## Required if ingress is enabled, remember to set your DNS
      domainName: www.example.com

      # ## Optional. Turns on Google's managed certificates
      ssl: true

      # ## Optional. Static external IP name on Google Cloud Platform
      staticIPName: example-external-ip-name

      # ## Optional. Ingress traffic routing via domain pathing, default is "/*"
      domainPath: /*

      # ## Optional. SSL policy name defined in Google Cloud Platform
      sslPolicy: example-policy-name

      # ## Optional. Supported values and its corresponding HTTP respond codes
      # ## ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#https_redirect
      httpsRedirect: MOVED_PERMANENTLY_DEFAULT

    - portMapping: "8080:80/udp"
      ingress: true
      domainName: www.example.com
      ssl: true
      staticIPName: example-external-ip-name
      domainPath: /*
      sslPolicy: example-policy-name
      httpsRedirect: MOVED_PERMANENTLY_DEFAULT
    - portMapping: "44380:443"
    - portMapping: "8081:"
    - portMapping: "8081:/udp"

## Optional. Creates backend config for Kubernetes services
## backendTimeout is a value in seconds
## connectionDrain is a value in seconds, beware to not set a value too high
## cloudArmor is the GCP cloud armor security policy name
## logSampleRate supports values from 0 to 1
## "iap: true" requires CLIENT_ID and CLIENT_SECRET properly set in secrets
## sessionAffinity supports CLIENT_IP and GENERATED_COOKIE
## cookieTTL is tied to GENERATED_COOKIE sessionAffinity
## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features
## NOTE: backend configurations are used for GKE only (need to check)
## NOTE: IAP needs to set "enabled: false" to fully disable IAP, check Ref
## NOTE: CDN, custom health check, and custom request header are not supported
backendConfig:
  enabled: false
  # backendTimeout: 30
  # connectionDrain: 30
  # cloudArmor: security-policy-name
  # logSampleRate: 0.1
  iap: false
  # sessionAffinity: CLIENT_IP
  # cookieTTL: 30

## Optional. Creates autoscaling by multiple metrics
## New autoscaling API allows scaling by multiple metrics and thresholds
## Supported values for metric: cpu, memory, pubsub, time
## Supported values for scalingType: Utilization, AverageValue
## NOTE: Utilization scalingType is only supported for cpu and memory
## NOTE: scalingLabelValue is the pubsub metric label filter
## NOTE: use "time" metric to scale pods according to time of date
autoscaling:
  enabled: false
  max: 4
  min: 1
  scaleBy:
    - metric: cpu
      target: 80
      type: Utilization
    - metric: memory
      target: 100Mi
      type: AverageValue
    # - metric: time
    #   target:
    #     - "0 */2 * * *": 2
    #     - "0 1-23/2 * * *": 1
    # - metric: pubsub
    #   target: 1000
    #   metricLabelValue: shoplus-staging-activejob-high

## Optional. Creates configuration file mappings
## These configuration files will be placed inside containers, overwriting
##   files already present in the container image
## NOTE: filenames listed in config.files must exist in ./configs directory
config:
  enabled: false
  files:
    - testing.sh

## Optional. Creates secret data using "Helm Secrets"
## These secrets can be in the form of a file or environment variable
## All filenames listed in secrets.files and all variable names listed in
##   secrets.variables must be defined and encrypted in ./secrets directory
## NOTE: ensure secrets plugin is configured properly
## NOTE: this only creates the secret resource, to attach the secrets into the
##       container, please review "containers" section above
## ref: https://github.com/jkroepke/helm-secrets
secrets:
  enabled: false
  fileNames:
    - thisIsASecretFileName.log
  variableNames:
    - thisIsASecretVariableName
    - CLIENT_ID
    - CLIENT_SECRET

## Optional. Creates additional persistent disks for storage
## Set persistent as true to prevent disk deletion when persistent volume
##   claim or persistent volume Kubernetes resources are deleted
## Comment out mountExistingDiskName or leave it blank to dynamically provision
##   a new persistent volume, use an existing disk name to mount existing disk
## NOTE: this only creates the persistent volume resources, to attach the
##       volume into the container, please review "containers" section above
## TODO: support ReadWriteMany access mode (use NFS)
## TODO: support multiple persistent disks per deployment
storage:
  enabled: true
  persistent: true
  size: 100Gi
  mountExistingDiskName: gce-disk-name

## Optional. Creates cron jobs, running independently of the main application
## Cron jobs creates standalone pods (or jobs)
## NOTE: filenames listed in "mountList" must exist in ./configs directory
cron:
  enabled: false
  schedule: "0 * * * *"
  jobs:
    ## NOTE: 'NAMESPACE' will be replaced in the chart with .Release.Namespace
    - execute: ["sh", "/gorlogs.sh", "NAMESPACE"]
      image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
      mountList: ["gorlogs.sh"]

## Optional. Enables Prometheus metric scraping
## supported values for scrapeLocation: service, pod, ingress
## NOTE: This is NOT to setup a Prometheus server
## NOTE: This technically also depends on the Prometheus configuration
## NOTE: only supports scraping one port number and scrape path per Helm chart
## ref: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config
prometheus:
  enabled: true
  scrapeLocation: ingress
  scrapePort: 9090
  scrapePath: /metrics
